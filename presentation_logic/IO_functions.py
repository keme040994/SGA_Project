# Created by: Dr. David John & Kenneth Meza.
# Created at: February, 2016.
# Updated at: May, 2016.

# LIBRARIES
import pydotplus as pydot


# ============
# IO FUNCTIONS
# ============

# FUNCTION: create_composite_model_image
def create_model_image(di_graph, name, likelihood_function):
    """
    Using a networkx's DAG (created based on the composite model or the amalgamated model), this function creates an
    image of the result of the Simple Genetic Algorithm using 'pydotplus' library.

    Args:
        di_graph : nx.DiGraph()
            It's a networkx's digraph representing the composite model or the amalgamated model
        name : STRING
            The name given in the variable 'a_name' on 'data_logic.data_input.py'
        likelihood_function: INT
            Indicates the likelihood function that is going to be used
                1 = cotemporal, 2 = next_step_one, 3 = next_step_one_two

    Returns:
        PNG IMAGE
            An image with the result of the problem, saved on the root file
    """
    if likelihood_function == 1:
        display_graph = pydot.Dot(graph_type='graph')
    else:
        display_graph = pydot.Dot(graph_type='digraph')

    nodes = di_graph.nodes()
    for node in nodes:
        display_graph.add_node(pydot.Node(node, penwidth="1.5", fontname="times-bold"))

    edges = di_graph.edges()
    if likelihood_function == 1:
        for edge in edges:
            if edge[0] < edge[1]:
                display_graph.add_edge(pydot.Edge(edge[0], edge[1],
                                                  label=" "+str(di_graph[edge[0]][edge[1]]['weight']),
                                                  color="black",
                                                  penwidth="1.5"))
    else:
        for edge in edges:
            display_graph.add_edge(pydot.Edge(edge[0], edge[1],
                                              label=" "+str(di_graph[edge[0]][edge[1]]['weight']),
                                              color="black",
                                              penwidth="1.5"))
    display_graph.write_png("../" + name + ".png")


# FUNCTION: write_matrix_file
def write_matrix_file(filename, matrix):
    """
    Writes a matrix in a format that will be readable for the function 'read_matrix_file'.

    Args:
        filename : STRING
            The path where the file is going to be created. It has to contain the name and extension of the file
        matrix : MATRIX[[INT/FLOAT, INT/FLOAT, ...], [INT/FLOAT, INT/FLOAT, ...], ...]
            The matrix which contains the data to be written on a file
    """
    file = open(filename, "w")
    for i in range(0, len(matrix)):
        file.write((str(matrix[i])[1:-1] + "\n").replace(' ', ''))
    file.close()


# FUNCTION: read_matrix_file
def read_matrix_file(filename):
    """
    Reads a file, containing information that is going to be converted in a matrix format. The information in the file
    was generated by the function 'write_matrix_file'.

    Args:
        filename : STRING
            The path where the file is located. It has to contain the name and extension of the file

    Returns:

    """
    file = open(filename, "r")
    matrix = [list(map(int, line.split(','))) for line in file if line.strip() != ""]
    file.close()
    return matrix
